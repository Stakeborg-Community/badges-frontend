{"version":3,"sources":["resources/img/sbdao.png","resources/img/bg_blur.png","enums/NFTOwnershipStatus.js","components/NFTCard.tsx","components/NFT.tsx","components/wallet.js","components/merkletree.js","resources/pdf/Brochure2.pdf","resources/pdf/MVP_EN.pdf","resources/pdf/MVP_RO.pdf","resources/img/metamask.svg","resources/img/polygon.svg","resources/img/github.svg","App.js","reportWebVitals.js","index.js"],"names":["Owned","Symbol","Mintable","NonMintable","Unknown","Priority","s","cardsStatusComparator","a","b","priorityA","status","priorityB","NFTCard","data","errorMessage","size","mintingFn","loading","setLoading","name","descriptionLines","description","split","ownedStatus","tokenId","attributes","useDisclosure","isOpen","onOpen","onClose","button","commonImageClasses","NFTOwnershipStatus","color","my","className","boxShadow","backgroundColor","variant","loadingText","onClick","isLoading","isDisabled","image","src","fallbackSrc","borderRadius","w","imageModal","px","pb","modal","isCentered","motionPreset","scrollBehavior","allowPinchZoom","bg","backdropFilter","backdropBlur","py","textAlign","fontWeight","lineHeight","as","mx","pt","templateRows","templateColumns","gap","rowSpan","colSpan","allowToggle","allowMultiple","defaultIndex","borderStyle","flex","map","line","i","divider","borderColor","attribute","trait_type","value","max_value","colorScheme","hasStripe","isAnimated","maxW","href","axios","require","NFT","props","_isMounted","useRef","React","useState","nftData","setNftData","setErrorMessage","fetchNFTData","useCallback","get","baseUri","res","Error","current","message","useEffect","console","log","CONTRACT_ADDRESS_V2","checkIfWalletIsConnected","currentAccountSetter","connectedContractSetter","window","ethereum","switchNetworkMumbai","provider","ethers","providers","Web3Provider","signer","getSigner","contract","Contract","SeniorityBadgev2","abi","send","accounts","length","account","on","location","reload","request","method","params","chainId","code","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","alert","Merkle","this","whitelist","trees","id","groupCollapsed","leaves","getLeaves","MerkleTree","keccak256","sort","getRoot","groupEnd","tokenWhitelist","address","getTree","toString","leaf","getHexProof","str","toLowerCase","includes","TOKEN_IDS","App","currentAccount","setCurrentAccount","connectedContract","setConnectedContract","cardsOwnedStatus","setCardsOwnedStatus","merkle","setMerkle","setBaseUri","cards","setCards","selectedPdf","setSelectedPdf","checkWalletConnection","wallet","then","result","getCardsOwned","updateNFTArray","mint","proof","parseInt","mintBootstrapper","nftTx","mintVeteran","mintAdopter","mintSustainer","mintBeliever","hash","wait","tx","error","cardsArray","sortedCardsStatus","k","push","nftComponent","copies","reqAccounts","Array","fill","balanceOfBatch","uri","tokenURI","replace","ownedstatus","whitelisted","isWhitelisted","showPdf","pdf","ratio","flexWrap","brochure","leftIcon","isAttached","mvpen","fontSize","countryCode","svg","title","mvpro","alignItems","p","mr","bgGradient","shortened","copiable","m","isTruncated","mb","fontStyle","height","width","border","metamaskIcon","minChildWidth","spacing","role","base","md","polygonIcon","float","isExternal","githubIcon","Date","getFullYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","customTheme","extendTheme","fonts","heading","body","components","Modal","baseStyle","dialog","variants","styles","global","backgroundImage","bg_blur","backgroundPosition","backgroundAttachment","backgroundSize","ReactDOM","render","StrictMode","theme","document","getElementById"],"mappings":"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","file":"static/js/main.1aaa94d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sbdao.cdf577d9.png\";","export default __webpack_public_path__ + \"static/media/bg_blur.8f1f3050.png\";","export const Owned = Symbol(\"OWNED\");\r\nexport const Mintable = Symbol(\"MINTABLE\");\r\nexport const NonMintable = Symbol(\"NON_MINTABLE\");\r\nexport const Unknown = Symbol(\"UNKNOWN\");\r\n\r\nexport const Priority = (s) => { \r\n    switch (s) {\r\n        case Owned: return 0;\r\n        case Mintable: return 0;\r\n        case NonMintable: return 0;\r\n        case Unknown: return 999;\r\n        default: return 100000;\r\n    }\r\n}\r\n\r\nconst cardsStatusComparator = (a,b) => {\r\n    const priorityA = Priority(a.status);\r\n    const priorityB = Priority(b.status);\r\n    return  priorityA > priorityB ? 1 : (priorityA < priorityB ? -1 : 0);\r\n  }\r\n\r\nexport  const sortCards = (ownedStatus) => {\r\n    let status = []\r\n    for (let k in ownedStatus)\r\n    {\r\n      status.push({ 'id': k, 'status':ownedStatus[k]});\r\n    }\r\n    status.sort(cardsStatusComparator);\r\n    return status;\r\n  }","import \"./NFT.css\";\r\nimport * as NFTOwnershipStatus from \"../enums/NFTOwnershipStatus.js\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Image,\r\n  Alert,\r\n  Text,\r\n  AlertIcon,\r\n  Progress,\r\n  Container,\r\n  Grid,\r\n  GridItem,\r\n  VStack,\r\n  StackDivider,\r\n  Heading,\r\n  Accordion,\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Center,\r\n  Divider\r\n} from '@chakra-ui/react';\r\nimport {\r\n  Modal,  \r\n  ModalCloseButton,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  useDisclosure \r\n} from '@chakra-ui/react'\r\n\r\n\r\nexport interface NFTData {\r\n    tokenId: string;\r\n    image?: string;\r\n    name?: string;\r\n    attributes: Array<any>;\r\n    description: string;\r\n    ownedStatus: Symbol;\r\n  }\r\n  \r\n\r\n/**\r\n * Private component to display an NFT given the data\r\n */\r\n export const NFTCard = ({\r\n    data,\r\n    errorMessage = '',\r\n    size = 'lg',\r\n    mintingFn,\r\n    loading,\r\n    setLoading\r\n  }: {\r\n    data: NFTData | undefined | null;\r\n    errorMessage?: string | undefined;\r\n    size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | undefined;\r\n    mintingFn: Function;\r\n    loading: boolean;\r\n    setLoading: Function;\r\n  }) => {\r\n    const name = data?.name;\r\n    const descriptionLines = data?.description?.split(\"\\n\");\r\n    const ownedStatus = data?.ownedStatus;\r\n    const tokenId = data?.tokenId;\r\n    const attributes = data?.attributes;\r\n  \r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const mint = () =>\r\n    {\r\n      mintingFn(tokenId, setLoading);\r\n    }\r\n  \r\n  \r\n    if (errorMessage) {\r\n      return (\r\n        <Alert status=\"error\">\r\n          <AlertIcon />\r\n          {errorMessage}\r\n        </Alert>\r\n      );\r\n    }\r\n  \r\n    let commonImageClasses = ownedStatus?.description;\r\n    let button;\r\n\r\n    if (ownedStatus !== NFTOwnershipStatus.Owned && tokenId != '9999')\r\n    {\r\n      button = <Button color='white' my=\"3\" className=\"nftButton\" boxShadow='md' backgroundColor='#0c8af2' variant='solid'  loadingText='Minting...'  onClick={mint} isLoading={loading} isDisabled={ownedStatus === NFTOwnershipStatus.NonMintable}>\r\n                Mint\r\n              </Button>;\r\n    }\r\n\r\n    const image = <Image className={commonImageClasses + ' hoverglow'}  src={data?.image} fallbackSrc='https://via.placeholder.com/150' borderRadius=\"xl\" w={size} loading=\"lazy\" boxShadow='2xl'/>;\r\n    //const imageReflected = <Image className={commonImageClasses  + ' reflection'}  src={data?.image} borderRadius=\"2xl\" w={size} loading=\"lazy\"/>;\r\n    const imageModal = <Image  src={data?.image} px='10px' pb='5px' fallbackSrc='https://via.placeholder.com/150' borderRadius=\"xl\" w={size} loading=\"lazy\" />;\r\n  \r\n  \r\n  \r\n  \r\n    const modal = <Modal isOpen={isOpen} onClose={onClose} size={'3xl'} isCentered motionPreset=\"scale\" scrollBehavior=\"inside\" allowPinchZoom>\r\n          <ModalOverlay bg='blackAlpha.600'\r\n                        backdropFilter='auto'\r\n                        backdropBlur='10px'/>\r\n          <ModalContent>\r\n            <ModalHeader py='2' textAlign={'center'} fontWeight='900' lineHeight='tight'> <Heading as='h1' size='lg' >{name} </Heading><Divider w='50%' mx='25%' pt='2' /></ModalHeader>\r\n              \r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n                <Grid templateRows='repeat(1, 1fr)' templateColumns='repeat(5, 1fr)'gap={5}>\r\n                  <GridItem rowSpan={1} colSpan={2}>\r\n                    {imageModal}\r\n                  </GridItem>\r\n\r\n                  <GridItem rowSpan={1} colSpan={3}>\r\n                      <Accordion allowToggle allowMultiple defaultIndex={[0]}>\r\n                        <AccordionItem borderStyle='none'>\r\n                            <AccordionButton>\r\n                              <Heading flex='1' size='md'>Description</Heading>\r\n                              <AccordionIcon />\r\n                            </AccordionButton>\r\n                          <AccordionPanel pb={4} textAlign={'center'}>\r\n                          {descriptionLines && descriptionLines.map((line, i) =>\r\n                            {return <Text key={line+'_'+ tokenId + '_' + i}>{line} <br/></Text>}\r\n                          )}\r\n                          </AccordionPanel>\r\n                        </AccordionItem>\r\n\r\n                        <AccordionItem borderStyle='none'>\r\n                            <AccordionButton>\r\n                              <Heading flex='1' size='md'>Attributes</Heading>\r\n                              <AccordionIcon />\r\n                            </AccordionButton>\r\n                          <AccordionPanel pb={4}>\r\n                            <VStack divider={<StackDivider borderColor='gray.200' />}>\r\n                              {\r\n                                attributes && attributes.map((attribute, i) =>\r\n                                    <Container key={'attribute_'+ tokenId + '_' + i}>              \r\n                                      <Text> {attribute.trait_type}: {attribute.value}</Text>\r\n                                      \r\n                                      {attribute.max_value &&\r\n                                        <Progress colorScheme={'orange'} size='md' borderRadius={'4px'} hasStripe isAnimated value={attribute.value/attribute.max_value*100} /> \r\n                                      }\r\n                              \r\n                                    </Container>  \r\n                                )\r\n                              }\r\n                            </VStack>\r\n                          </AccordionPanel>\r\n                        </AccordionItem>\r\n                      </Accordion>\r\n                  </GridItem>\r\n                </Grid>\r\n            </ModalBody>\r\n           \r\n          </ModalContent>\r\n        </Modal>\r\n  \r\n    return (\r\n        <Box maxW={size} borderRadius='lg' >\r\n          \r\n          <a href=\"#\" onClick={onOpen}>\r\n            {image}\r\n            {modal}\r\n          </a>\r\n  \r\n          {button}\r\n          \r\n        </Box>\r\n  \r\n    );\r\n  };\r\n  \r\n  ","\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport { NFTCard, NFTData } from './NFTCard';\r\nconst axios = require('axios');\r\n\r\nexport interface NFTProps {\r\n  /**\r\n   * The id of the NFT.\r\n   */\r\n  tokenId: string;\r\n  /**\r\n   * The size of the NFT card.\r\n   */\r\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n   /**\r\n   * The status of the NFT ownership\r\n   */\r\n  ownedStatus: Symbol;\r\n  /**\r\n   * The function to call upon minting\r\n   */\r\n  mintingFn: Function;\r\n  /**\r\n   * The base uri to get token info\r\n   */\r\n  baseUri: string;\r\n}\r\n\r\n/**\r\n * Component to fetch and display NFT data\r\n */\r\nexport const NFT = (props: NFTProps) => {\r\n  const _isMounted = useRef(true);\r\n  const [nftData, setNftData] = React.useState<NFTData>();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [errorMessage, setErrorMessage] = React.useState<string>();\r\n  const fetchNFTData = useCallback(async () => {\r\n    try {\r\n      \r\n      //const res = await fetch();\r\n      let res = await axios.get(props.baseUri + props.tokenId + \".json\")\r\n      if (res.status !== 200) {\r\n        throw Error(\r\n          `Request failed with status: ${res.status}. Make sure the ipfs url is correct.`\r\n        );\r\n      }\r\n      const data = await res.data;\r\n      if (_isMounted.current) {\r\n        setNftData({\r\n          tokenId: props.tokenId,\r\n          image: data.image,\r\n          name: data.name,\r\n          attributes: data.attributes,\r\n          description: data.description,\r\n          ownedStatus: props.ownedStatus\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        setErrorMessage(error.message);\r\n      } else {\r\n        setErrorMessage('An unknown error occurred');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(`Update on NFT ${props.tokenId} triggered. Owned status changed to ${props.ownedStatus.description}`);\r\n    _isMounted.current = true;\r\n    fetchNFTData();\r\n    return () => {\r\n      _isMounted.current = false;\r\n    };\r\n  }, [props.ownedStatus, loading]);\r\n\r\n  return <NFTCard data={nftData} errorMessage={errorMessage} size={props.size} mintingFn={props.mintingFn} loading={loading} setLoading={setLoading}/>;\r\n};\r\n","import { ethers } from \"ethers\";\r\nimport SeniorityBadgev2 from \"../json/SeniorityBadge-v2.json\";\r\n\r\nconst axios = require('axios');\r\nexport const CONTRACT_ADDRESS_V2 = \"0x97E4743723570De6aEEd04560DB765CAAc8FD12F\";\r\n\r\nexport const checkIfWalletIsConnected = async (currentAccountSetter, connectedContractSetter) => {\r\n    const {ethereum} = window;  \r\n    if (!ethereum) {\r\n        console.log(\"Make sure you have metamask\");\r\n        return;\r\n    } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n    // Check if metamask is connected to Mumbai. Trigger network switch if not\r\n    await switchNetworkMumbai();\r\n\r\n    // Connect to contract\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const contract = new ethers.Contract(CONTRACT_ADDRESS_V2, SeniorityBadgev2.abi, signer);\r\n    await connectedContractSetter(contract);\r\n\r\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\r\n\r\n    if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        window.ethereum.on(\"accountsChanged\", () => { window.location.reload() }); // reload page if account changes\r\n        console.log(\"Found authorized account:\", account);\r\n        await currentAccountSetter(account);\r\n    }    \r\n}\r\n\r\nconst switchNetworkMumbai = async () => {\r\n    try {\r\n        await window.ethereum.request({\r\n        method: \"wallet_switchEthereumChain\",\r\n        params: [{ chainId: \"0x13881\" }],\r\n        });\r\n    } catch (error) {\r\n        if (error.code === 4902) {\r\n        try {\r\n            await window.ethereum.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: [\r\n                {\r\n                chainId: \"0x13881\",\r\n                chainName: \"Mumbai\",\r\n                rpcUrls: [\"https://matic-mumbai.chainstacklabs.com\"],\r\n                nativeCurrency: {\r\n                    name: \"Matic\",\r\n                    symbol: \"Matic\",\r\n                    decimals: 18,\r\n                },\r\n                blockExplorerUrls: [\"https://explorer-mumbai.maticvigil.com\"],\r\n                },\r\n            ],\r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n        }\r\n    }\r\n}","import {MerkleTree} from \"merkletreejs\";\r\nimport keccak256 from \"keccak256\";\r\nimport whitelist from \"../json/whitelist.json\";\r\n\r\nexport default class Merkle {\r\n\r\n    constructor() {\r\n        this.whitelist = whitelist;\r\n        this.trees = [];\r\n        return (async () => {\r\n            // try {      \r\n            //     const res = await fetch(\"https://ipfs.io/ipfs/QmaLwggVBJhqSmQhdDPa4zipug8BHME3PV4JPVbsXxRBvN/whitelist.json\");\r\n                    \r\n            //     if (!res.ok) {\r\n            //       throw Error(\r\n            //         `Request failed with status: ${res.status}. Make sure the ipfs url is correct.`\r\n            //       );\r\n            //     }\r\n            //     const data = await res.json();\r\n                \r\n            //     console.log(\"Whitelist received\", data);\r\n            //     this.whitelist = data;\r\n            // } catch (error) {\r\n            //     console.error(error);\r\n            // }\r\n            console.groupCollapsed(\"Merkle root for all tokens:\");\r\n            for (let id in this.whitelist.tokenId)\r\n            {\r\n                const leaves = this.getLeaves(id);\r\n                this.trees[id] = new MerkleTree(leaves, keccak256, {sort: true});\r\n                console.log(id, this.getRoot(id));\r\n            }\r\n            console.groupEnd();\r\n\r\n            return this;\r\n        })();       \r\n    }\r\n\r\n    tokenWhitelist(tokenId) {\r\n        return this.whitelist.tokenId[tokenId] ?? [];\r\n    }\r\n\r\n    getLeaves(tokenId) {\r\n        const wl = this.tokenWhitelist(tokenId);\r\n        return wl.map(address => keccak256(address));\r\n    } \r\n\r\n    getTree(tokenId) {\r\n        return this.trees[tokenId];\r\n    }\r\n\r\n    getRoot(tokenId) {\r\n        const tree = this.getTree(tokenId);\r\n        return tree.getRoot().toString('hex');\r\n    }\r\n\r\n    getHexProof(address, tokenId) {\r\n        const leaf = keccak256(address);\r\n        const tree = this.getTree(tokenId);\r\n        return tree.getHexProof(leaf)\r\n    }\r\n\r\n    isWhitelisted(address, tokenId) {\r\n        const wl = this.tokenWhitelist(tokenId).map((str) => str.toLowerCase());\r\n        return wl.includes(address.toLowerCase());\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/Brochure2.5e81c514.pdf\";","export default __webpack_public_path__ + \"static/media/MVP_EN.c556cd65.pdf\";","export default __webpack_public_path__ + \"static/media/MVP_RO.7842bab5.pdf\";","export default __webpack_public_path__ + \"static/media/metamask.b6b09bd4.svg\";","export default __webpack_public_path__ + \"static/media/polygon.fb5b773c.svg\";","export default __webpack_public_path__ + \"static/media/github.04be58c1.svg\";","import './App.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalOverlay,\r\n  useDisclosure \r\n} from '@chakra-ui/react'\r\nimport { Container, SimpleGrid,AspectRatio, Box, Button, Heading, Flex, Spacer, Stack, ButtonGroup, Link, Text, Image, Center } from '@chakra-ui/react';\r\nimport { AttachmentIcon, InfoIcon, ExternalLinkIcon, createIcon  } from '@chakra-ui/icons'\r\nimport { NFT } from \"./components/NFT.tsx\";\r\nimport { Address } from \"@web3-ui/components\";\r\nimport * as NFTOwnershipStatus from \"./enums/NFTOwnershipStatus\";\r\nimport * as wallet from \"./components/wallet.js\";\r\nimport Merkle from \"./components/merkletree.js\";\r\nimport brochure from \"./resources/pdf/Brochure2.pdf\"\r\nimport mvpen from \"./resources/pdf/MVP_EN.pdf\"\r\nimport mvpro from \"./resources/pdf/MVP_RO.pdf\"\r\nimport ReactCountryFlag from \"react-country-flag\"\r\nimport metamaskIcon from \"./resources/img/metamask.svg\"\r\nimport polygonIcon from \"./resources/img/polygon.svg\"\r\nimport githubIcon from \"./resources/img/github.svg\"\r\n\r\n\r\n\r\nconst Logo = require('./resources/img/sbdao.png')\r\nconst TOKEN_IDS = [0,1,2,3,4,9999,9999,9999,9999,9999]; // This spits out warnings in log but it's fine, we do not care about the unknwon badges\r\n\r\n\r\nfunction App() {\r\n/* Lesson learned the hard way: Change state variables only using their set function */\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [connectedContract, setConnectedContract] = useState(null);\r\n  const [cardsOwnedStatus, setCardsOwnedStatus] = useState(null);\r\n  const [merkle, setMerkle] = useState(null);\r\n  const [baseUri, setBaseUri] = useState(null);\r\n  // Cards owned by the connected account\r\n  const [cards, setCards] = useState([]);\r\n\r\n\r\n  const [selectedPdf, setSelectedPdf] = useState(null)\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n\r\n  // Helper middleware function\r\n  const checkWalletConnection = async () =>\r\n  {\r\n    await wallet.checkIfWalletIsConnected(setCurrentAccount,setConnectedContract);\r\n  }\r\n\r\n  // Initialise merkle trees and do wallet connection\r\n  useEffect( () => {\r\n    new Merkle().then((result) => setMerkle(result));\r\n    checkWalletConnection();\r\n  }, []);\r\n\r\n\r\n  // Trigget getting of badges owned only when both the contract and merkel instance has been initialised\r\n  useEffect(() => {\r\n    if (connectedContract !== null && merkle !== null && currentAccount != \"\") {\r\n      getCardsOwned();\r\n    }\r\n  }, [connectedContract, currentAccount, merkle])\r\n\r\n\r\n  // Trigger the creation of the badges for rendering only after the ownership of the badges has been decided\r\n  useEffect( () => {\r\n    if (cardsOwnedStatus !== null) {\r\n      updateNFTArray();\r\n    }\r\n  }, [cardsOwnedStatus]);   \r\n  \r\n\r\n  const mint = async (tokenId, setLoading) => {\r\n    console.log(\"trying to mint: \", tokenId); \r\n    await checkWalletConnection();\r\n    let nftTx;\r\n    let tx;\r\n\r\n    try {\r\n      const proof = merkle.getHexProof(currentAccount, tokenId);\r\n      \r\n      switch (parseInt(tokenId)) {\r\n        case 0:\r\n          nftTx = await connectedContract.mintBootstrapper(proof);\r\n          break;\r\n        case 1:\r\n          nftTx = await connectedContract.mintVeteran(proof);\r\n          break;\r\n        case 2:\r\n          nftTx = await connectedContract.mintAdopter(proof);\r\n          break;\r\n        case 3:\r\n          nftTx = await connectedContract.mintSustainer(proof);\r\n          break;\r\n        case 4:\r\n          nftTx = await connectedContract.mintBeliever(proof);\r\n          break;\r\n        default:\r\n          alert(\"You are trying to mint a non-existent token.\");\r\n      }\r\n      \r\n\t\t\tconsole.log('Minting....', nftTx.hash);\r\n      setLoading(true);\r\n    } catch (error) {\r\n      alert((error.data ? error.data.message : null) ?? error.message ?? \"Unsupported error\");\r\n      return;\r\n    } \r\n\r\n\r\n    try{    \r\n      tx = await nftTx.wait();\r\n      console.log('Minted!', tx);  \r\n      \r\n    } catch (error) {\r\n      console.error(`Failed to mint token ${tokenId} for address ${currentAccount}`);\r\n      alert((error.data ? error.data.message : null) ?? error.message ?? \"Unsupported error\");\r\n    }\r\n    finally {\r\n      await getCardsOwned();\r\n      window.location.reload();\r\n    }\r\n  \r\n}\r\n  \r\n \r\n\r\n  const updateNFTArray = () => {\r\n    let cardsArray = [];\r\n    let sortedCardsStatus = NFTOwnershipStatus.sortCards(cardsOwnedStatus);\r\n    for (let i=0; i<sortedCardsStatus.length; i++) {\r\n      let nftComponent = <NFT key={sortedCardsStatus[i].id} tokenId={sortedCardsStatus[i].id} ownedStatus={sortedCardsStatus[i].status} mintingFn={mint} baseUri={baseUri}></NFT>;\r\n      cardsArray.push(nftComponent);\r\n    }\r\n    console.log(\"Create nft arrays\");\r\n    console.log(cardsArray);\r\n    setCards(cardsArray);\r\n  }\r\n\r\n\r\n  \r\n\r\n  const getCardsOwned = async () => {\r\n    console.groupCollapsed('Contract instance');\r\n    console.log(connectedContract);\r\n    console.groupEnd();\r\n    console.groupCollapsed('Owned tokens');\r\n\r\n\r\n    // Pentru a nu apela blockchain-ul in loops si a fi mai eficient, le extragen o singura data\r\n    let copies = []\r\n\r\n    try {\r\n      let reqAccounts = Array(TOKEN_IDS.length).fill(currentAccount)\r\n      copies = await connectedContract.balanceOfBatch(reqAccounts, TOKEN_IDS)\r\n      console.log(copies)\r\n      let tokenURI = await connectedContract.uri(0)\r\n      setBaseUri(tokenURI.replace(/{id}.json/, \"\"))  // reg. expr. pt a extrege baseUrl: de ex. din \"ipfs.com/CID/1.json\" devine \"ipfs.com/CID/\"\r\n    } catch (error) {\r\n      console.error(`Failed to get balance of tokens for address ${currentAccount}.`);\r\n      console.error(error);\r\n      console.groupEnd();\r\n      return;\r\n    }\r\n\r\n\r\n    let ownedstatus = {};\r\n    for (let i=0; i<TOKEN_IDS.length; i++) {\r\n      const id = TOKEN_IDS[i];\r\n      const whitelisted = merkle.isWhitelisted(currentAccount, id);\r\n      \r\n      if (parseInt(copies[i]) !== 0) {\r\n        ownedstatus[id] = NFTOwnershipStatus.Owned;\r\n      } \r\n      else if (whitelisted) {\r\n        ownedstatus[id] = NFTOwnershipStatus.Mintable;\r\n      } else {\r\n        ownedstatus[id] = NFTOwnershipStatus.NonMintable;\r\n      }       \r\n    }\r\n    console.groupEnd();  \r\n    setCardsOwnedStatus(ownedstatus);    \r\n  }    \r\n\r\n\r\n  // Render this when the wallet is not connected\r\n  const renderNotConnectedContainer = () => (\r\n    <Container>\r\n      <Button\r\n        onClick={checkWalletConnection}\r\n        size='md'\r\n        height='48px'\r\n        width='200px'\r\n        border='2px'\r\n      >\r\n        <Image src={metamaskIcon} w='10' mr='2'></Image>\r\n      Connect Wallet\r\n      </Button>\r\n    </Container>\r\n    \r\n  );\r\n  \r\n  // Render this when the wallet is connected\r\n  const renderBadgeContainer = () => (\r\n\r\n    <Container maxW='container.xl' className=\"badge-container\">\r\n          <SimpleGrid minChildWidth='120px' spacing='100px'>\r\n            {cards}\r\n          </SimpleGrid>\r\n    </Container>\r\n  );\r\n\r\n  const renderAddressContainer = () => (\r\n    <Box alignItems='center' w='200px' p='10px' mr='30px' bg='tomato' color='white' borderRadius='lg' boxShadow='lg' bgGradient=\"linear(to-l, #3c4bbb, #00003b)\" >\r\n        <Address value={currentAccount} shortened copiable></Address> \r\n    </Box>\r\n  )\r\n\r\n  const showPdf = (pdf) =>\r\n  {\r\n    setSelectedPdf(pdf);\r\n    onOpen();\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal isOpen={isOpen} onClose={onClose} min-height='200px' min-width='300px' size='4xl' isCentered motionPreset=\"scale\" scrollBehavior=\"outside\" allowPinchZoom>\r\n        <ModalOverlay bg='blackAlpha.600'\r\n                        backdropFilter='auto'\r\n                        backdropBlur='20px'/>\r\n        <ModalContent>\r\n              <AspectRatio ratio={4/3}>\r\n                <iframe src={selectedPdf}/>\r\n              </AspectRatio> \r\n        </ModalContent>\r\n      </Modal>\r\n\r\n      <Container maxW='container.xl' pb='3'>\r\n        <Flex flexWrap={'wrap'}>\r\n        <Button mx='2' onClick={() => showPdf(brochure)} colorScheme='blue' leftIcon={<InfoIcon/>} variant={'ghost'}>Brochure</Button>\r\n\r\n          <ButtonGroup isAttached variant={'ghost'} colorScheme='blue'>\r\n            <Button onClick={() => showPdf(mvpen)} aria-label=\"EN Version\" fontSize={'lg'} >Mission, Vission and Pillars |&nbsp; <ReactCountryFlag countryCode=\"GB\" svg title='GB'/></Button>\r\n            <Button onClick={() => showPdf(mvpro)} aria-label='RO Version' fontSize={'lg'} ><ReactCountryFlag countryCode=\"RO\" title=\"RO\" svg /></Button>\r\n          </ButtonGroup>\r\n          <Spacer />\r\n          {currentAccount !== \"\" ? renderAddressContainer() : null}\r\n        </Flex>\r\n        <Heading size=\"xl\" m='30px' color='#0e126e' isTruncated >  Stakeborg Community Achievements </Heading>\r\n        <Heading size=\"lg\" mb='30px' color='gray.700' fontStyle='italic' isTruncated >\"One for All and All for DAO\" </Heading>\r\n        <div >\r\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderBadgeContainer()}\r\n        </div>\r\n      </Container>\r\n\r\n      <Container as=\"footer\" role=\"contentinfo\" pt={{ base: '12', md: '15vh' }}>\r\n        <Stack spacing={{ base: '4', md: '2' }}>\r\n          <Center>\r\n              <Text fontSize=\"sm\" color=\"purple.300\" isTruncated >\r\n                <Image w='5' src={polygonIcon} float='left'/> &nbsp;\r\n                <Link href={'https://mumbai.polygonscan.com/address/'+wallet.CONTRACT_ADDRESS_V2} isExternal>\r\n                  {wallet.CONTRACT_ADDRESS_V2}\r\n                </Link>\r\n              </Text>\r\n          </Center>\r\n          <Center>\r\n              <Text fontSize=\"sm\" isTruncated >\r\n                <Image w='5' src={githubIcon} float='left'/> &nbsp;\r\n                <Link href='https://github.com/Stakeborg-Community/badges-frontend' isExternal> Badges Frontend </Link>\r\n              </Text>\r\n          </Center>\r\n              \r\n          <Text fontSize=\"sm\" color=\"subtle\" isTruncated>\r\n            &copy; {new Date().getFullYear()} Stakeborg DAO - Bring Web3.\r\n          </Text>\r\n        </Stack>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport bg_blur from './resources/img/bg_blur.png'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ChakraProvider } from '@chakra-ui/react'\r\nimport { Provider } from '@web3-ui/components';\r\nimport { extendTheme } from \"@chakra-ui/react\"\r\n\r\nconst customTheme = extendTheme({\r\n  fonts: {\r\n    heading: 'HeadingFont',\r\n    body: 'BodyFont'\r\n  },\r\n  components: {\r\n    Modal: {\r\n      baseStyle: (props) => ({\r\n        dialog: {\r\n          bg: 'rgba(200, 200, 200, 0.8)',\r\n          //shadow: 'none'\r\n        }\r\n      }),\r\n      variants: {\r\n        \r\n      }\r\n    }\r\n  },\r\n  styles: {\r\n    global: (props) => ({\r\n      body: {\r\n        backgroundImage: bg_blur,\r\n        backgroundPosition: 'no-repeat',\r\n        backgroundAttachment: 'fixed',\r\n        backgroundSize: 'cover'\r\n      }\r\n    })\r\n  },\r\n})\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider theme={customTheme}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('stakeborg-badges')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}