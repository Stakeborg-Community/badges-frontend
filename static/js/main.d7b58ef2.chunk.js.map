{"version":3,"sources":["resources/img/bg_blur.png","enums/NFTOwnershipStatus.js","components/NFTCard.tsx","components/NFT.tsx","components/HelpPopover.tsx","components/wallet.js","components/merkletree.js","resources/pdf/Brochure2.pdf","resources/pdf/MVP_EN.pdf","resources/pdf/MVP_RO.pdf","resources/img/metamask.svg","resources/img/polygon.svg","resources/img/github.svg","App.js","reportWebVitals.js","index.js"],"names":["Owned","Symbol","Mintable","NonMintable","Unknown","Priority","s","cardsStatusComparator","a","b","priorityA","status","priorityB","NFTCard","data","errorMessage","size","mintingFn","loading","setLoading","name","descriptionLines","description","split","ownedStatus","tokenId","attributes","useState","imageLoaded","setImageLoaded","useDisclosure","isOpen","onOpen","onClose","button","commonImageClasses","NFTOwnershipStatus","color","my","className","boxShadow","backgroundColor","variant","loadingText","onClick","isLoading","isDisabled","image","isLoaded","src","onLoad","borderRadius","w","imageModal","px","pb","modal","isCentered","motionPreset","scrollBehavior","allowPinchZoom","bg","backdropFilter","backdropBlur","py","textAlign","fontWeight","lineHeight","as","mx","pt","templateRows","templateColumns","gap","rowSpan","colSpan","allowToggle","allowMultiple","defaultIndex","borderStyle","flex","map","line","i","divider","borderColor","attribute","trait_type","value","max_value","colorScheme","hasStripe","isAnimated","maxW","href","axios","require","NFT","props","_isMounted","useRef","React","nftData","setNftData","setErrorMessage","fetchNFTData","useCallback","get","baseUri","res","Error","current","message","useEffect","console","log","HelpPopover","placement","closeOnBlur","icon","CONTRACT_ADDRESS_V2","checkIfWalletIsConnected","currentAccountSetter","connectedContractSetter","window","ethereum","switchNetworkMumbai","provider","ethers","providers","Web3Provider","signer","getSigner","contract","Contract","SeniorityBadgev2","abi","send","accounts","length","account","on","location","reload","_chainId","request","method","params","chainId","code","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","alert","Merkle","id","this","whitelist","trees","groupCollapsed","leaves","getLeaves","MerkleTree","keccak256","sort","getRoot","groupEnd","tokenWhitelist","address","getTree","toString","leaf","getHexProof","str","toLowerCase","includes","App","currentAccount","setCurrentAccount","connectedContract","setConnectedContract","cardsOwnedStatus","setCardsOwnedStatus","merkle","setMerkle","setBaseUri","cards","setCards","selectedPdf","setSelectedPdf","checkWalletConnection","wallet","getCardsOwned","updateNFTArray","mint","proof","parseInt","mintBootstrapper","nftTx","mintVeteran","mintAdopter","mintSustainer","mintBeliever","hash","wait","tx","error","collection","sortedCardsStatus","collections","values","push","key","cardsArray","nftComponent","mt","mb","isTruncated","minChildWidth","spacing","copies","tokens","collectionName","TOKEN_IDS","reqAccounts","Array","fill","balanceOfBatch","uri","tokenURI","replace","ownedstatus","whitelisted","isWhitelisted","showPdf","pdf","ratio","flexWrap","brochure","leftIcon","mvpen","fontSize","countryCode","svg","title","mvpro","alignItems","p","bgGradient","shortened","copiable","m","fontStyle","height","width","border","metamaskIcon","mr","role","base","md","polygonIcon","float","isExternal","githubIcon","Date","getFullYear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","customTheme","extendTheme","fonts","heading","body","components","Modal","baseStyle","dialog","variants","styles","global","backgroundImage","bg_blur","backgroundPosition","backgroundAttachment","backgroundSize","ReactDOM","render","StrictMode","theme","document","getElementById"],"mappings":"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","file":"static/js/main.d7b58ef2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg_blur.8f1f3050.png\";","export const Owned = Symbol(\"OWNED\");\r\nexport const Mintable = Symbol(\"MINTABLE\");\r\nexport const NonMintable = Symbol(\"NON_MINTABLE\");\r\nexport const Unknown = Symbol(\"UNKNOWN\");\r\n\r\nexport const Priority = (s) => { \r\n    switch (s) {\r\n        case Owned: return 0;\r\n        case Mintable: return 0;\r\n        case NonMintable: return 0;\r\n        case Unknown: return 999;\r\n        default: return 100000;\r\n    }\r\n}\r\n\r\nconst cardsStatusComparator = (a,b) => {\r\n    const priorityA = Priority(a.status);\r\n    const priorityB = Priority(b.status);\r\n    return  priorityA > priorityB ? 1 : (priorityA < priorityB ? -1 : 0);\r\n  }\r\n\r\nexport  const sortCards = (ownedStatus) => {\r\n    let collections = {}\r\n    for (let name in ownedStatus) {\r\n      let values = ownedStatus[name]\r\n      let status = []\r\n      for (let i=0; i<values.length; i++)\r\n      {\r\n        status.push({ 'id': values[i].id, 'status':values[i].status});\r\n      }\r\n      status.sort(cardsStatusComparator);\r\n      collections[name] = status;\r\n    }\r\n    \r\n    return collections;\r\n  }","import \"./NFT.css\";\r\nimport * as NFTOwnershipStatus from \"../enums/NFTOwnershipStatus.js\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Image,\r\n  Alert,\r\n  Text,\r\n  AlertIcon,\r\n  Progress,\r\n  Container,\r\n  Grid,\r\n  GridItem,\r\n  VStack,\r\n  StackDivider,\r\n  Heading,\r\n  Accordion,\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Center,\r\n  Divider,\r\n  Skeleton\r\n} from '@chakra-ui/react';\r\nimport {\r\n  Modal,  \r\n  ModalCloseButton,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  useDisclosure \r\n} from '@chakra-ui/react'\r\nimport { useState } from \"react\";\r\n\r\n\r\nexport interface NFTData {\r\n    tokenId: string;\r\n    image?: string;\r\n    name?: string;\r\n    attributes: Array<any>;\r\n    description: string;\r\n    ownedStatus: Symbol;\r\n  }\r\n  \r\n\r\n/**\r\n * Private component to display an NFT given the data\r\n */\r\n export const NFTCard = ({\r\n    data,\r\n    errorMessage = '',\r\n    size = 'lg',\r\n    mintingFn,\r\n    loading,\r\n    setLoading\r\n  }: {\r\n    data: NFTData | undefined | null;\r\n    errorMessage?: string | undefined;\r\n    size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | undefined;\r\n    mintingFn: Function;\r\n    loading: boolean;\r\n    setLoading: Function;\r\n  }) => {\r\n    const name = data?.name;\r\n    const descriptionLines = data?.description?.split(\"\\n\");\r\n    const ownedStatus = data?.ownedStatus;\r\n    const tokenId = data?.tokenId;\r\n    const attributes = data?.attributes;\r\n  \r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const mint = () =>\r\n    {\r\n      mintingFn(tokenId, setLoading);\r\n    }\r\n  \r\n  \r\n    if (errorMessage) {\r\n      return (\r\n        <Alert status=\"error\">\r\n          <AlertIcon />\r\n          {errorMessage}\r\n        </Alert>\r\n      );\r\n    }\r\n  \r\n    let commonImageClasses = ownedStatus?.description;\r\n    let button;\r\n\r\n    if (ownedStatus !== NFTOwnershipStatus.Owned && tokenId != '9999')\r\n    {\r\n      button = <Button color='white' my=\"3\" className=\"nftButton\" boxShadow='md' backgroundColor='#0c8af2' variant='solid'  loadingText='Minting...'  onClick={mint} isLoading={loading} isDisabled={ownedStatus === NFTOwnershipStatus.NonMintable}>\r\n                Mint\r\n              </Button>;\r\n    }\r\n\r\n\r\n\r\n    const image = <Skeleton isLoaded={imageLoaded}><Image className={commonImageClasses + ' hoverglow'}  src={data?.image} onLoad={()=>setImageLoaded(true)} borderRadius=\"xl\" w={size} loading=\"lazy\" boxShadow='2xl'/></Skeleton>;\r\n    //const imageReflected = <Skeleton><Image className={commonImageClasses  + ' reflection'}  src={data?.image} borderRadius=\"2xl\" w={size} loading=\"lazy\"/></Skeleton>;\r\n    const imageModal = <Skeleton isLoaded={imageLoaded}><Image  src={data?.image} px='10px' pb='5px' borderRadius=\"xl\" w={size} loading=\"lazy\" /></Skeleton>;\r\n  \r\n  \r\n  \r\n  \r\n    const modal = <Modal isOpen={isOpen} onClose={onClose} size={'3xl'} isCentered motionPreset=\"scale\" scrollBehavior=\"inside\" allowPinchZoom>\r\n          <ModalOverlay bg='blackAlpha.600'\r\n                        backdropFilter='auto'\r\n                        backdropBlur='10px'/>\r\n          <ModalContent>\r\n            <ModalHeader py='2' textAlign={'center'} fontWeight='900' lineHeight='tight'> <Heading as='h1' size='lg' >{name} </Heading><Divider w='50%' mx='25%' pt='2' /></ModalHeader>\r\n              \r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n                <Grid templateRows='repeat(1, 1fr)' templateColumns='repeat(5, 1fr)'gap={5}>\r\n                  <GridItem rowSpan={1} colSpan={2}>\r\n                    {imageModal}\r\n                  </GridItem>\r\n\r\n                  <GridItem rowSpan={1} colSpan={3}>\r\n                      <Accordion allowToggle allowMultiple defaultIndex={[0,1]}>\r\n                        <AccordionItem borderStyle='none'>\r\n                            <AccordionButton>\r\n                              <Heading flex='1' size='md'>Description</Heading>\r\n                              <AccordionIcon />\r\n                            </AccordionButton>\r\n                          <AccordionPanel pb={4} textAlign={'center'}>\r\n                          {descriptionLines && descriptionLines.map((line, i) =>\r\n                            {return <Text key={line+'_'+ tokenId + '_' + i}>{line} <br/></Text>}\r\n                          )}\r\n                          </AccordionPanel>\r\n                        </AccordionItem>\r\n\r\n                        <AccordionItem borderStyle='none'>\r\n                            <AccordionButton>\r\n                              <Heading flex='1' size='md'>Attributes</Heading>\r\n                              <AccordionIcon />\r\n                            </AccordionButton>\r\n                          <AccordionPanel pb={4}>\r\n                            <VStack divider={<StackDivider borderColor='gray.200' />}>\r\n                              {\r\n                                attributes && attributes.map((attribute, i) =>\r\n                                    <Container key={'attribute_'+ tokenId + '_' + i}>              \r\n                                      <Text> {attribute.trait_type}: {attribute.value}</Text>\r\n                                      \r\n                                      {attribute.max_value &&\r\n                                        <Progress colorScheme={'orange'} size='md' borderRadius={'4px'} hasStripe isAnimated value={attribute.value/attribute.max_value*100} /> \r\n                                      }\r\n                              \r\n                                    </Container>  \r\n                                )\r\n                              }\r\n                            </VStack>\r\n                          </AccordionPanel>\r\n                        </AccordionItem>\r\n                      </Accordion>\r\n                  </GridItem>\r\n                </Grid>\r\n            </ModalBody>\r\n           \r\n          </ModalContent>\r\n        </Modal>\r\n  \r\n    return (\r\n        <Box maxW={size} borderRadius='lg' >\r\n          \r\n          <a href=\"#\" onClick={onOpen}>\r\n            {image}\r\n            {modal}\r\n          </a>\r\n  \r\n          {button}\r\n          \r\n        </Box>\r\n  \r\n    );\r\n  };\r\n  \r\n  ","\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport { NFTCard, NFTData } from './NFTCard';\r\nconst axios = require('axios');\r\n\r\nexport interface NFTProps {\r\n  /**\r\n   * The id of the NFT.\r\n   */\r\n  tokenId: string;\r\n  /**\r\n   * The size of the NFT card.\r\n   */\r\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n   /**\r\n   * The status of the NFT ownership\r\n   */\r\n  ownedStatus: Symbol;\r\n  /**\r\n   * The function to call upon minting\r\n   */\r\n  mintingFn: Function;\r\n  /**\r\n   * The base uri to get token info\r\n   */\r\n  baseUri: string;\r\n}\r\n\r\n/**\r\n * Component to fetch and display NFT data\r\n */\r\nexport const NFT = (props: NFTProps) => {\r\n  const _isMounted = useRef(true);\r\n  const [nftData, setNftData] = React.useState<NFTData>();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [errorMessage, setErrorMessage] = React.useState<string>();\r\n  const fetchNFTData = useCallback(async () => {\r\n    try {\r\n      \r\n      //const res = await fetch();\r\n      let res = await axios.get(props.baseUri + props.tokenId + \".json\")\r\n      if (res.status !== 200) {\r\n        throw Error(\r\n          `Request failed with status: ${res.status}. Make sure the ipfs url is correct.`\r\n        );\r\n      }\r\n      const data = await res.data;\r\n      if (_isMounted.current) {\r\n        setNftData({\r\n          tokenId: props.tokenId,\r\n          image: data.image,\r\n          name: data.name,\r\n          attributes: data.attributes,\r\n          description: data.description,\r\n          ownedStatus: props.ownedStatus\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        setErrorMessage(error.message);\r\n      } else {\r\n        setErrorMessage('An unknown error occurred');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(`Update on NFT ${props.tokenId} triggered. Owned status changed to ${props.ownedStatus.description}`);\r\n    _isMounted.current = true;\r\n    fetchNFTData();\r\n    return () => {\r\n      _isMounted.current = false;\r\n    };\r\n  }, [props.ownedStatus, loading]);\r\n\r\n  return <NFTCard data={nftData} errorMessage={errorMessage} size={props.size} mintingFn={props.mintingFn} loading={loading} setLoading={setLoading}/>;\r\n};\r\n","import {Popover, PopoverArrow, PopoverBody, PopoverCloseButton, PopoverHeader, PopoverTrigger, PopoverContent, IconButton} from '@chakra-ui/react';\r\nimport {QuestionIcon} from '@chakra-ui/icons'\r\nimport React from 'react';\r\n\r\n \r\nexport const HelpPopover = () => {\r\n    return (\r\n      <Popover\r\n        placement='bottom'\r\n        closeOnBlur={true}\r\n      >\r\n        <PopoverTrigger>\r\n          <IconButton icon={<QuestionIcon/>} aria-label='Help' variant='ghost'/>\r\n        </PopoverTrigger>\r\n        <PopoverContent color='white' bg='blue.400' borderColor='blue.400'>\r\n          <PopoverArrow />\r\n          <PopoverCloseButton />\r\n          <PopoverBody>\r\n            If you encounter any issues, do not hesitate to contact any of the following people:\r\n            <br/>\r\n            Bogdan I#7371\r\n            <br/>\r\n            andreiv#4775\r\n            <br/>\r\n            eugenPtr#1051\r\n            <br/>\r\n\r\n          </PopoverBody>\r\n        </PopoverContent>\r\n      </Popover>\r\n    )\r\n  }","import { ethers } from \"ethers\";\r\nimport SeniorityBadgev2 from \"../json/SeniorityBadge-v2.json\";\r\n\r\nconst axios = require('axios');\r\nexport const CONTRACT_ADDRESS_V2 = \"0x97E4743723570De6aEEd04560DB765CAAc8FD12F\";\r\n\r\nexport const checkIfWalletIsConnected = async (currentAccountSetter, connectedContractSetter) => {\r\n    const {ethereum} = window;  \r\n    if (!ethereum) {\r\n        console.log(\"Make sure you have metamask\");\r\n        return;\r\n    } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n    // Check if metamask is connected to Mumbai. Trigger network switch if not\r\n    await switchNetworkMumbai();\r\n\r\n    // Connect to contract\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const contract = new ethers.Contract(CONTRACT_ADDRESS_V2, SeniorityBadgev2.abi, signer);\r\n    await connectedContractSetter(contract);\r\n\r\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\r\n\r\n    if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        ethereum.on(\"accountsChanged\", () => { window.location.reload() }); // reload page if account changes\r\n        ethereum.on('chainChanged', (_chainId) => window.location.reload()); // reload page if chain changed\r\n\r\n        console.log(\"Found authorized account:\", account);\r\n        await currentAccountSetter(account);\r\n    }    \r\n}\r\n\r\nconst switchNetworkMumbai = async () => {\r\n    try {\r\n        await window.ethereum.request({\r\n        method: \"wallet_switchEthereumChain\",\r\n        params: [{ chainId: \"0x13881\" }],\r\n        });\r\n    } catch (error) {\r\n        if (error.code === 4902) {\r\n        try {\r\n            await window.ethereum.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: [\r\n                {\r\n                chainId: \"0x13881\",\r\n                chainName: \"Mumbai\",\r\n                rpcUrls: [\"https://matic-mumbai.chainstacklabs.com\"],\r\n                nativeCurrency: {\r\n                    name: \"Matic\",\r\n                    symbol: \"Matic\",\r\n                    decimals: 18,\r\n                },\r\n                blockExplorerUrls: [\"https://explorer-mumbai.maticvigil.com\"],\r\n                },\r\n            ],\r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n        }\r\n    }\r\n}","import {MerkleTree} from \"merkletreejs\";\r\nimport keccak256 from \"keccak256\";\r\nimport whitelist from \"../json/whitelist.json\";\r\n\r\nexport default class Merkle {\r\n\r\n    constructor() {\r\n        this.whitelist = whitelist;\r\n        this.trees = [];\r\n\r\n        console.groupCollapsed(\"Merkle root for all tokens:\");\r\n        for (let id in this.whitelist.tokenId)\r\n        {\r\n            const leaves = this.getLeaves(id);\r\n            this.trees[id] = new MerkleTree(leaves, keccak256, {sort: true});\r\n            console.log(id, this.getRoot(id));\r\n        }\r\n        console.groupEnd();      \r\n    }\r\n\r\n    tokenWhitelist(tokenId) {\r\n        return this.whitelist.tokenId[tokenId] ?? [];\r\n    }\r\n\r\n    getLeaves(tokenId) {\r\n        const wl = this.tokenWhitelist(tokenId);\r\n        return wl.map(address => keccak256(address));\r\n    } \r\n\r\n    getTree(tokenId) {\r\n        return this.trees[tokenId];\r\n    }\r\n\r\n    getRoot(tokenId) {\r\n        const tree = this.getTree(tokenId);\r\n        return tree.getRoot().toString('hex');\r\n    }\r\n\r\n    getHexProof(address, tokenId) {\r\n        const leaf = keccak256(address);\r\n        const tree = this.getTree(tokenId);\r\n        return tree.getHexProof(leaf)\r\n    }\r\n\r\n    isWhitelisted(address, tokenId) {\r\n        const wl = this.tokenWhitelist(tokenId).map((str) => str.toLowerCase());\r\n        return wl.includes(address.toLowerCase());\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/Brochure2.946fbb7d.pdf\";","export default __webpack_public_path__ + \"static/media/MVP_EN.c3d84cc9.pdf\";","export default __webpack_public_path__ + \"static/media/MVP_RO.ef0d7658.pdf\";","export default __webpack_public_path__ + \"static/media/metamask.b6b09bd4.svg\";","export default __webpack_public_path__ + \"static/media/polygon.fb5b773c.svg\";","export default __webpack_public_path__ + \"static/media/github.04be58c1.svg\";","import './App.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalOverlay,\r\n  useDisclosure \r\n} from '@chakra-ui/react'\r\nimport { Container, SimpleGrid,AspectRatio, Box, Button, Heading, Flex, Spacer, Stack, ButtonGroup, Link, Text, Image, Center, IconButton } from '@chakra-ui/react';\r\nimport { AttachmentIcon, InfoIcon, ExternalLinkIcon, createIcon  } from '@chakra-ui/icons'\r\nimport { NFT } from \"./components/NFT.tsx\";\r\nimport { HelpPopover } from './components/HelpPopover';\r\nimport { Address } from \"@web3-ui/components\";\r\nimport * as NFTOwnershipStatus from \"./enums/NFTOwnershipStatus\";\r\nimport * as wallet from \"./components/wallet.js\";\r\nimport Merkle from \"./components/merkletree.js\";\r\nimport brochure from \"./resources/pdf/Brochure2.pdf\"\r\nimport mvpen from \"./resources/pdf/MVP_EN.pdf\"\r\nimport mvpro from \"./resources/pdf/MVP_RO.pdf\"\r\nimport ReactCountryFlag from \"react-country-flag\"\r\nimport metamaskIcon from \"./resources/img/metamask.svg\"\r\nimport polygonIcon from \"./resources/img/polygon.svg\"\r\nimport githubIcon from \"./resources/img/github.svg\"\r\nimport tokens from \"./json/tokens.json\";\r\n\r\nfunction App() {\r\n/* Lesson learned the hard way: Change state variables only using their set function */\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [connectedContract, setConnectedContract] = useState(null);\r\n  const [cardsOwnedStatus, setCardsOwnedStatus] = useState(null);\r\n  const [merkle, setMerkle] = useState(null);\r\n  const [baseUri, setBaseUri] = useState(null);\r\n  // Cards owned by the connected account\r\n  const [cards, setCards] = useState([]);\r\n\r\n\r\n  const [selectedPdf, setSelectedPdf] = useState(null)\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n\r\n  // Helper middleware function\r\n  const checkWalletConnection = async () =>\r\n  {\r\n    await wallet.checkIfWalletIsConnected(setCurrentAccount,setConnectedContract);\r\n  }\r\n\r\n  // Initialise merkle trees and do wallet connection\r\n  useEffect( () => {\r\n    setMerkle(new Merkle());\r\n    checkWalletConnection();\r\n  }, []);\r\n\r\n\r\n  // Trigget getting of badges owned only when both the contract and merkel instance has been initialised\r\n  useEffect(() => {\r\n    if (connectedContract !== null && merkle !== null && currentAccount != \"\") {\r\n      getCardsOwned();\r\n    }\r\n  }, [connectedContract, currentAccount, merkle])\r\n\r\n\r\n  // Trigger the creation of the badges for rendering only after the ownership of the badges has been decided\r\n  useEffect( () => {\r\n    if (cardsOwnedStatus !== null) {\r\n      updateNFTArray();\r\n    }\r\n  }, [cardsOwnedStatus]);   \r\n  \r\n\r\n  const mint = async (tokenId, setLoading) => {\r\n    console.log(\"trying to mint: \", tokenId); \r\n    await checkWalletConnection();\r\n    let nftTx;\r\n    let tx;\r\n\r\n    try {\r\n      const proof = merkle.getHexProof(currentAccount, tokenId);\r\n      \r\n      switch (parseInt(tokenId)) {\r\n        case 0:\r\n          nftTx = await connectedContract.mintBootstrapper(proof);\r\n          break;\r\n        case 1:\r\n          nftTx = await connectedContract.mintVeteran(proof);\r\n          break;\r\n        case 2:\r\n          nftTx = await connectedContract.mintAdopter(proof);\r\n          break;\r\n        case 3:\r\n          nftTx = await connectedContract.mintSustainer(proof);\r\n          break;\r\n        case 4:\r\n          nftTx = await connectedContract.mintBeliever(proof);\r\n          break;\r\n        default:\r\n          alert(\"You are trying to mint a non-existent token.\");\r\n      }\r\n      \r\n\t\t\tconsole.log('Minting....', nftTx.hash);\r\n      setLoading(true);\r\n    } catch (error) {\r\n      alert((error.data ? error.data.message : null) ?? error.message ?? \"Unsupported error\");\r\n      return;\r\n    } \r\n\r\n\r\n    try{    \r\n      tx = await nftTx.wait();\r\n      console.log('Minted!', tx);  \r\n      \r\n    } catch (error) {\r\n      console.error(`Failed to mint token ${tokenId} for address ${currentAccount}`);\r\n      alert((error.data ? error.data.message : null) ?? error.message ?? \"Unsupported error\");\r\n    }\r\n    finally {\r\n      await getCardsOwned();\r\n      window.location.reload();\r\n    }\r\n  \r\n}\r\n  \r\n \r\n\r\n  const updateNFTArray = () => {\r\n    let collection = [];\r\n\r\n    let sortedCardsStatus = NFTOwnershipStatus.sortCards(cardsOwnedStatus);\r\n    for (let key in sortedCardsStatus) {\r\n      let value = sortedCardsStatus[key]\r\n      let cardsArray = []\r\n      for (let i=0; i<value.length; i++) {\r\n        let nftComponent = <NFT key={\"nft_\"+value[i].id+\"_\"+i} tokenId={value[i].id} ownedStatus={value[i].status} mintingFn={mint} baseUri={baseUri}></NFT>\r\n        cardsArray.push(nftComponent);\r\n      }\r\n      collection.push(<Heading as='h4' size=\"lg\" mt='30px' mb='2' textAlign='left' color='white' isTruncated key={\"collection_name_\"+key}>{key}</Heading>)      \r\n      collection.push(<SimpleGrid key={\"collection_\"+key} minChildWidth='120px' spacing='100px'>{cardsArray}</SimpleGrid>)\r\n    }\r\n    \r\n    console.log(\"Create nft arrays\");\r\n    console.log(collection);\r\n    setCards(collection);\r\n  }\r\n\r\n\r\n  \r\n\r\n  const getCardsOwned = async () => {\r\n    console.groupCollapsed('Contract instance');\r\n    console.log(connectedContract);\r\n    console.groupEnd();\r\n    console.groupCollapsed('Owned tokens');\r\n\r\n\r\n    // Do batch balance checking for each collection to be displayed\r\n    let copies = {}\r\n\r\n    for (let name in tokens.collectionName) {\r\n      let TOKEN_IDS = tokens.collectionName[name];\r\n      try {\r\n        let reqAccounts = Array(TOKEN_IDS.length).fill(currentAccount)\r\n        copies[name] = await connectedContract.balanceOfBatch(reqAccounts, TOKEN_IDS)\r\n        console.log(copies)\r\n        if (baseUri === null) {\r\n          let tokenURI = await connectedContract.uri(0)\r\n          setBaseUri(tokenURI.replace(/{id}.json/, \"\"))  // extract baseUrl: from \"ipfs.com/CID/1.json\"  to  \"ipfs.com/CID/\"\r\n        }\r\n      } catch (error) {\r\n        console.error(`Failed to get balance of tokens for address ${currentAccount}.`);\r\n        console.error(error);\r\n        console.groupEnd();\r\n        return;\r\n      }\r\n    }\r\n    \r\n\r\n\r\n    let ownedstatus = {};\r\n    for (let name in tokens.collectionName) {\r\n      let TOKEN_IDS = tokens.collectionName[name];\r\n      ownedstatus[name] = ownedstatus[name] ?? [];\r\n      \r\n        \r\n      \r\n      for (let i=0; i<TOKEN_IDS.length; i++) {\r\n        const id = TOKEN_IDS[i];\r\n        const whitelisted = merkle.isWhitelisted(currentAccount, id);\r\n        \r\n        let status = {};\r\n        status['id'] = id;\r\n        if (parseInt(copies[name][i]) !== 0) {\r\n          \r\n          status['status'] = NFTOwnershipStatus.Owned\r\n        } \r\n        else if (whitelisted) {\r\n          status['status'] = NFTOwnershipStatus.Mintable;\r\n        } else {\r\n          status['status'] = NFTOwnershipStatus.NonMintable;\r\n        }   \r\n        \r\n        ownedstatus[name].push(status)\r\n      }\r\n    }\r\n    console.groupEnd();  \r\n    setCardsOwnedStatus(ownedstatus);    \r\n  }    \r\n\r\n\r\n  // Render this when the wallet is not connected\r\n  const renderNotConnectedContainer = () => (\r\n    <Container>\r\n      <Button\r\n        onClick={checkWalletConnection}\r\n        size='md'\r\n        height='48px'\r\n        width='200px'\r\n        border='2px'\r\n      >\r\n        <Image src={metamaskIcon} w='10' mr='2'></Image>\r\n      Connect Wallet\r\n      </Button>\r\n    </Container>\r\n    \r\n  );\r\n  \r\n  // Render this when the wallet is connected\r\n  const renderBadgeContainer = () => (\r\n\r\n    <Container maxW='container.xl' className=\"badge-container\">\r\n          {cards}\r\n    </Container>\r\n  );\r\n\r\n  const renderAddressContainer = () => (\r\n    \r\n    <Box alignItems='center' w='200px' p='8px' bg='tomato' color='white' borderRadius='lg' boxShadow='lg' bgGradient=\"linear(to-l, #3c4bbb, #00003b)\" >\r\n        <Address value={currentAccount} shortened copiable></Address> \r\n    </Box>\r\n  )\r\n\r\n \r\n\r\n  const showPdf = (pdf) =>\r\n  {\r\n    setSelectedPdf(pdf);\r\n    onOpen();\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal isOpen={isOpen} onClose={onClose} min-height='200px' min-width='300px' size='4xl' isCentered motionPreset=\"scale\" scrollBehavior=\"outside\" allowPinchZoom>\r\n        <ModalOverlay bg='blackAlpha.600'\r\n                        backdropFilter='auto'\r\n                        backdropBlur='20px'/>\r\n        <ModalContent>\r\n              <AspectRatio ratio={1}>\r\n                <iframe src={selectedPdf}/>\r\n              </AspectRatio> \r\n        </ModalContent>\r\n      </Modal>\r\n\r\n      <Container maxW='container.xl' pb='3'>\r\n        <Flex flexWrap={'wrap'}>\r\n          <HelpPopover/> \r\n          <Button mx='2' onClick={() => showPdf(brochure)} colorScheme='blue' leftIcon={<InfoIcon/>} variant={'ghost'}>Brochure</Button>\r\n\r\n          <Button variant={'ghost'} colorScheme='blue' onClick={() => showPdf(mvpen)} aria-label=\"EN Vision\" fontSize={'lg'} ><ReactCountryFlag countryCode=\"GB\" svg title='GB'/>&nbsp;Vision</Button>\r\n          <Button variant={'ghost'} colorScheme='blue' onClick={() => showPdf(mvpro)} aria-label='RO Viziune' fontSize={'lg'} ><ReactCountryFlag countryCode=\"RO\" title=\"RO\" svg />&nbsp;Viziune</Button>\r\n          <Spacer />         \r\n          {currentAccount !== \"\" ? renderAddressContainer() : null}\r\n          {currentAccount !== \"\" ? <IconButton size='md' colorScheme='red' variant='ghost' icon={<ExternalLinkIcon/>} onClick={()=>setCurrentAccount(\"\")}/> : null}\r\n\r\n        </Flex>\r\n        <Heading size=\"xl\" m='30px' color='#0e126e' isTruncated >  Stakeborg Community Achievements </Heading>\r\n        <Heading size=\"lg\" mb='30px' color='gray.700' fontStyle='italic' isTruncated >\"One for All and All for DAO\" </Heading>\r\n        <div >\r\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderBadgeContainer()}\r\n        </div>\r\n      </Container>\r\n\r\n      <Container as=\"footer\" role=\"contentinfo\" pt={{ base: '12', md: '15vh' }}>\r\n        <Stack spacing={{ base: '4', md: '2' }}>\r\n          <Center>\r\n              <Text fontSize=\"sm\" color=\"purple.300\" isTruncated >\r\n                <Image w='5' src={polygonIcon} float='left'/> &nbsp;\r\n                <Link href={'https://mumbai.polygonscan.com/address/'+wallet.CONTRACT_ADDRESS_V2} isExternal>\r\n                  {wallet.CONTRACT_ADDRESS_V2}\r\n                </Link>\r\n              </Text>\r\n          </Center>\r\n          <Center>\r\n              <Text fontSize=\"sm\" isTruncated >\r\n                <Image w='5' src={githubIcon} float='left'/> &nbsp;\r\n                <Link href='https://github.com/Stakeborg-Community/badges-frontend' isExternal> Badges Frontend </Link>\r\n              </Text>\r\n          </Center>\r\n              \r\n          <Text fontSize=\"sm\" color=\"subtle\" isTruncated>\r\n            &copy; {new Date().getFullYear()} Stakeborg DAO - Bring Web3.\r\n          </Text>\r\n        </Stack>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport bg_blur from './resources/img/bg_blur.png'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ChakraProvider } from '@chakra-ui/react'\r\nimport { Provider } from '@web3-ui/components';\r\nimport { extendTheme } from \"@chakra-ui/react\"\r\n\r\nconst customTheme = extendTheme({\r\n  fonts: {\r\n    heading: 'HeadingFont',\r\n    body: 'BodyFont'\r\n  },\r\n  components: {\r\n    Modal: {\r\n      baseStyle: (props) => ({\r\n        dialog: {\r\n          bg: 'rgba(200, 200, 200, 0.8)',\r\n          //shadow: 'none'\r\n        }\r\n      }),\r\n      variants: {\r\n        \r\n      }\r\n    }\r\n  },\r\n  styles: {\r\n    global: (props) => ({\r\n      body: {\r\n        backgroundImage: bg_blur,\r\n        backgroundPosition: 'no-repeat',\r\n        backgroundAttachment: 'fixed',\r\n        backgroundSize: 'cover'\r\n      }\r\n    })\r\n  },\r\n})\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider theme={customTheme}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('stakeborg-badges')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}